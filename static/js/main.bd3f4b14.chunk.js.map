{"version":3,"sources":["services/storageService.js","services/weatherService.js","cmps/Header/Header.jsx","store/actions/weatherActions.js","cmps/FavoritesList/FavoritesList.jsx","pages/Favorites/Favorites.jsx","cmps/LocationSearch/LocationSearch.jsx","cmps/WeatherPreview/WeatherPreview.jsx","cmps/WeeklyList/WeeklyList.jsx","pages/HomePage/HomePage.jsx","App.jsx","reportWebVitals.js","store/reducers/weatherReducer.js","store/index.js","index.js"],"names":["storageService","saveToStorage","key","data","localStorage","setItem","JSON","stringify","loadFromStorage","parse","getItem","API_KEY","WEATHER_KEY","FAVORITES","gFavorites","weatherService","getGeoWeather","getCurrWeather","addToFavorites","city","push","removeFromFavorites","id","cityIdx","findIndex","splice","isFavorite","some","getFavorites","getPosition","Promise","success","error","navigator","geolocation","getCurrentPosition","a","position","coords","latitude","longitude","currWeather","q","weather","axios","Key","todayWeather","weeklyWeather","LocalizedName","today","weekly","console","log","mapDispatchToProps","changeUnits","units","dispatch","type","connect","props","onChangeUnits","className","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","Link","href","NavDropdown","title","Item","onClick","FavoritesList","favorites","onChangeCurrWeather","tempratureToShow","Temperature","Metric","Value","Imperial","map","Card","style","width","Title","Text","setCurrWeather","state","weatherReducer","useState","setFavorites","useEffect","history","LocationSearch","onSearch","search","setSearch","handleSubmit","e","preventDefault","Form","inline","onSubmit","FormControl","placeholder","value","onChange","target","Button","variant","WeatherPreview","toggleFavorite","favBtnText","WeatherText","WeeklyList","moment","Date","format","min","Minimum","max","Maximum","Math","floor","EpochDate","addCityToFavorites","setFavBtnText","term","DailyForecasts","App","component","Favorites","path","HomePage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yVAAaA,EAAiB,CAC1BC,cAIJ,SAAuBC,EAAKC,GACxBC,aAAaC,QAAQH,EAAII,KAAKC,UAAUJ,KAJxCK,gBAOJ,SAAyBN,GACrB,OAAOI,KAAKG,MAAML,aAAaM,QAAQR,MCP3C,IAAMS,EAAU,mCACVC,EAAc,UACdC,EAAY,YACZC,EAAad,EAAeQ,gBAAgBK,IAAc,GAEnDE,EAAiB,CAC1BC,c,2CACAC,iBACAC,eAcJ,SAAwBC,GAGpB,OAFAL,EAAWM,KAAKD,GAChBnB,EAAeC,cAAcY,EAAWC,GACjCA,GAhBPO,oBAmBJ,SAA6BC,GACzB,IAAMC,EAAUT,EAAWU,WAAU,SAACL,GAAD,OAAUA,EAAKG,KAAOA,KAC3D,OAAiB,IAAbC,GACAT,EAAWW,OAAOF,EAAS,GAC3BvB,EAAeC,cAAcY,EAAWC,GACjCA,IACI,GAxBfY,WAQJ,SAAoBJ,GAChB,OAAOR,EAAWa,MAAK,SAACR,GAAD,OAAUA,EAAKG,KAAOA,MAR7CM,aAGJ,WACI,OAAOd,IAsBX,SAASe,IACL,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,UAAUC,YAAYC,mBAAmBJ,EAASC,M,4CAI1D,8BAAAI,EAAA,sEACyBP,IADzB,cACQQ,EADR,OAEyBA,EAASC,OAAtBC,SACcF,EAASC,OAAvBE,UAKK,SARjB,SAS8BvB,EADb,UARjB,cASUwB,EATV,yBAUWA,GAVX,6C,+BAaexB,E,8EAAf,WAA8ByB,GAA9B,qBAAAN,EAAA,2DACQO,EAAU3C,EAAeQ,gBAAgBI,IADjD,yCAEwB+B,GAFxB,gCAI2BC,IAAM,+EAAD,OAC2DjC,EAD3D,cACwE+B,IALxG,cAIcvB,EAJd,gBAOmCyB,IAAM,4DAAD,OACgCzB,EAAKhB,KAAK,GAAG0C,IAD7C,mBAC2DlC,IARnG,cAOcmC,EAPd,iBAUoCF,IAAM,+DAAD,OACkCzB,EAAKhB,KAAK,GAAG0C,IAD/C,mBAC6DlC,EAD7D,iBAVzC,eAUcoC,EAVd,OAaQJ,EAAU,CACNrB,GAAIH,EAAKhB,KAAK,GAAG0C,IACjB1B,KAAMA,EAAKhB,KAAK,GAAG6C,cACnBC,MAAOH,EAAa3C,KAAK,GACzB+C,OAAQH,EAAc5C,MAE1BH,EAAeC,cAAcW,EAAa+B,GAnBlD,kBAoBeA,GApBf,wCAsBQQ,QAAQC,IAAI,QAAZ,MAtBR,gE,uCClBMC,EAAqB,CACvBC,YCQG,SAAqBC,GACxB,OAAO,SAACC,GACJA,EAAS,CAAEC,KAAM,eAAgBF,aDP1BG,cAAQ,KAAML,EAAdK,EAtCA,SAACC,GACZ,SAASC,EAAcL,GACnBI,EAAML,YAAYC,GAEtB,OACI,wBAAQM,UAAU,SAAlB,SACI,eAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAA1B,UACI,cAACF,EAAA,EAAOG,OAAR,CAAeC,gBAAc,qBAC7B,cAACJ,EAAA,EAAOK,SAAR,CAAiB7C,GAAG,mBAApB,SACI,eAAC8C,EAAA,EAAD,CAAKP,UAAU,UAAf,UACI,cAACO,EAAA,EAAIC,KAAL,CAAUC,KAAK,KAAf,kBACA,cAACF,EAAA,EAAIC,KAAL,CAAUC,KAAK,aAAf,uBACA,eAACC,EAAA,EAAD,CACIC,MAAM,gBACNlD,GAAG,qBAFP,UAII,cAACiD,EAAA,EAAYE,KAAb,CACIC,QAAS,kBAAMd,EAAc,MADjC,qBAKA,cAACW,EAAA,EAAYE,KAAb,CACIC,QAAS,kBAAMd,EAAc,MADjC,wC,wBEIbe,EA7BO,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,oBAAqBtB,EAAY,EAAZA,MACrD,SAASuB,EAAiBnC,GACtB,MAAiB,MAAVY,EAAA,UACEZ,EAAQoC,YAAYC,OAAOC,MAD7B,oBAEEtC,EAAQoC,YAAYG,SAASD,MAF/B,UAKX,OACI,yBAASpB,UAAU,0CAAnB,SACKe,GACGA,EAAUO,KAAI,SAACxC,GACX,OACI,eAACyC,EAAA,EAAD,CACIC,MAAO,CAAEC,MAAO,SAChBzB,UAAU,2BAEVa,QAAS,kBAAMG,EAAoBlC,IAJvC,UAMI,cAACyC,EAAA,EAAKG,MAAN,UAAa5C,EAAQxB,OACrB,cAACiE,EAAA,EAAKI,KAAN,UACKV,EAAiBnC,EAAQM,WALzBN,EAAQrB,UCqBnC+B,G,MAAqB,CACvBoC,eFZG,SAAwBhD,GAC3B,OAAO,SAACe,GACJA,EAAS,CAAEC,KAAM,mBAAoBhB,oBEa9BiB,eAXS,SAACgC,GACrB,MAAO,CACHd,UAAWc,EAAMC,eAAef,UAChCrB,MAAOmC,EAAMC,eAAepC,SAQIF,EAAzBK,EApCG,SAACC,GAAW,IAAD,EACSiC,mBAAS,MADlB,mBAClBhB,EADkB,KACPiB,EADO,KAWzB,OATAC,qBAAU,WACND,EAAalC,EAAMiB,cASnB,sBAAKf,UAAU,qCAAf,UACI,qDACCe,GACG,cAAC,EAAD,CACIA,UAAWA,EACXC,oBAXhB,SAA2BlC,GACvBgB,EAAM8B,eAAe9C,GACrBgB,EAAMoC,QAAQ3E,KAAK,MAUPmC,MAAOI,EAAMJ,c,yBCWlByC,G,OA9BQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTL,mBAAS,IADA,mBAC9BM,EAD8B,KACtBC,EADsB,KAOrC,SAASC,EAAaC,GAClBA,EAAEC,iBACFL,EAASC,GAGb,OACI,yBAASrC,UAAU,kBAAnB,SACI,eAAC0C,EAAA,EAAD,CAAMC,QAAM,EAACC,SAAUL,EAAvB,UACI,cAACM,EAAA,EAAD,CACIjD,KAAK,OACLkD,YAAY,SACZ9C,UAAU,UACV+C,MAAOV,EACPW,SAjBhB,SAAsBR,GAClBF,EAAUE,EAAES,OAAOF,UAkBX,cAACG,EAAA,EAAD,CAAQrC,QAAS0B,EAAcY,QAAQ,kBAAvC,2BCEDC,G,OAzBQ,SAAC,GAMjB,IALHtE,EAKE,EALFA,QACAxB,EAIE,EAJFA,KACA+F,EAGE,EAHFA,eACAC,EAEE,EAFFA,WACA5D,EACE,EADFA,MAOA,OACI,eAAC6B,EAAA,EAAD,CACIC,MAAO,CAAEC,MAAO,SAChBzB,UAAU,2CAFd,UAII,cAACuB,EAAA,EAAKG,MAAN,UAAapE,IACb,mBAAGuD,QAASwC,EAAgBrD,UAAWsD,IACvC,cAAC/B,EAAA,EAAKI,KAAN,UAXa,MAAVjC,EAAA,UACEZ,EAAQoC,YAAYC,OAAOC,MAD7B,oBAEEtC,EAAQoC,YAAYG,SAASD,MAF/B,YAYH,cAACG,EAAA,EAAKG,MAAN,UAAa5C,EAAQyE,mB,iBCelBC,G,OAlCI,YAA4B,IAAzBA,EAAwB,EAAxBA,WAAY9D,EAAY,EAAZA,MAS9B,OACI,yBAASM,UAAU,uCAAnB,SACKwD,EAAWlC,KAAI,SAACxC,GACb,OACI,eAACyC,EAAA,EAAD,CACIC,MAAO,CAAEC,MAAO,SAChBzB,UAAU,2CAFd,UAKI,cAACuB,EAAA,EAAKG,MAAN,UACK+B,IAAO3E,EAAQ4E,MAAMC,OAAO,SAEjC,cAACpC,EAAA,EAAKI,KAAN,WApBMiC,EAsBE9E,EAAQoC,YAAY2C,QAAQzC,MAtBzB0C,EAuBHhF,EAAQoC,YAAY6C,QAAQ3C,MAtBnC,MAAV1B,EAAA,UACEkE,EADF,cACWE,EADX,oBAEEE,KAAKC,MAAY,IAANL,EAAY,IAFzB,cAEkCI,KAAKC,MAC9B,IAANH,EAAY,IAHf,eAcchF,EAAQoF,WAfjC,IAA0BN,EAAKE,SCgG7BtE,G,OAAqB,CACvBrC,cNzFG,WACH,8CAAO,WAAOwC,GAAP,eAAApB,EAAA,+EAE2BrB,EAAeC,gBAF1C,cAEOyB,EAFP,OAGCe,EAAS,CAAEC,KAAM,mBAAoBhB,gBAHtC,kBAIQA,GAJR,sCAMCU,QAAQC,IAAI,QAAZ,MAND,8DAAP,uDMyFAnC,eNvGG,SAAwBE,GAC3B,8CAAO,WAAOqC,GAAP,eAAApB,EAAA,+EAE2BrB,EAAeE,eAAeE,GAFzD,cAEOsB,EAFP,OAGCe,EAAS,CAAEC,KAAM,mBAAoBhB,gBAHtC,kBAIQA,GAJR,sCAMCU,QAAQC,IAAI,QAAZ,MAND,8DAAP,uDMuGA4E,mBNxEG,SAA4B7G,GAC/B,8CAAO,WAAOqC,GAAP,eAAApB,EAAA,6DACGwC,EAAY7D,EAAeG,eAAeC,GAChDqC,EAAS,CAAEC,KAAM,mBAAoBmB,cAFlC,kBAGIA,GAHJ,2CAAP,uDMwEAvD,oBNjEG,SAA6BC,GAChC,8CAAO,WAAOkC,GAAP,eAAApB,EAAA,6DACGwC,EAAY7D,EAAeM,oBAAoBC,GACrDkC,EAAS,CAAEC,KAAM,mBAAoBmB,cAFlC,kBAGIA,GAHJ,2CAAP,yDMmEWlB,eAdS,SAACgC,GACrB,MAAO,CACHjD,YAAaiD,EAAMC,eAAelD,YAClCc,MAAOmC,EAAMC,eAAepC,SAWIF,EAAzBK,EA9FE,SAACC,GAAW,IAAD,EACYiC,mBAAS,IADrB,mBACjBuB,EADiB,KACLc,EADK,iDA0BxB,WAA4BC,GAA5B,eAAA9F,EAAA,+EAEkCuB,EAAM1C,eAAeiH,GAFvD,OAEczF,EAFd,OAGQwF,EACIlH,EAAeW,WAAWe,EAAYnB,IAChC,uBACA,wBANlB,gDASQ6B,QAAQC,IAAI,QAAZ,MATR,0DA1BwB,sBAsDxB,OAnDA0C,qBAAU,WACFnC,EAAMlB,YACNwF,EACIlH,EAAeW,WAAWiC,EAAMlB,YAAYnB,IACtC,uBACA,wBAGV,uCAAC,4BAAAc,EAAA,+EAEiCuB,EAAM3C,gBAFvC,OAEayB,EAFb,OAGOwF,EACIlH,EAAeW,WAAWe,EAAYnB,IAChC,uBACA,wBANjB,gDASO6B,QAAQC,IAAI,QAAZ,MATP,yDAAD,yDAaL,IA+BC,qBAAKS,UAAU,eAAf,SACKF,EAAMlB,aACH,gCACI,uBAAMoB,UAAU,4BAAhB,UACI,sBAAMA,UAAU,2BAAhB,SACI,cAAC,EAAD,CACIlB,QAASgB,EAAMlB,YAAYQ,MAC3B9B,KAAMwC,EAAMlB,YAAYtB,KACxBgG,WAAYA,EACZD,eAzB5B,WACInG,EAAeW,WAAWiC,EAAMlB,YAAYnB,IACtCqC,EAAMtC,oBAAoBsC,EAAMlB,YAAYnB,IAC5CqC,EAAMqE,mBAAmBrE,EAAMlB,aAKrCwF,EACIlH,EAAeW,WAAWiC,EAAMlB,YAAYnB,IACtC,uBACA,yBAeciC,MAAOI,EAAMJ,UAGrB,cAAC,EAAD,CAAgB0C,SApEZ,iDAsER,cAAC,EAAD,CACIoB,WAAY1D,EAAMlB,YAAYS,OAAOiF,eACrC5E,MAAOI,EAAMJ,gB,OCpEtB6E,MAdf,WACI,OACI,cAAC,IAAD,UACI,sBAAKvE,UAAU,MAAf,UACI,cAAC,EAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOwE,UAAWC,EAAWC,KAAK,eAClC,cAAC,IAAD,CAAOF,UAAWG,EAAUD,KAAK,eCDtCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCLRQ,EAAgB,CAClBzG,YAAa,KACbmC,UAAW7D,EAAea,eAC1B2B,MAAO,K,YCDL4F,EAAcC,YAAgB,CAACzD,eDI9B,WAAwD,IAAhCD,EAA+B,uDAAvBwD,EAAeG,EAAQ,uCAC1D,OAAQA,EAAO5F,MACX,IAAK,mBACD,OAAO,2BAAKiC,GAAZ,IAAmBjD,YAAa4G,EAAO5G,cAC3C,IAAK,mBACD,OAAO,2BAAKiD,GAAZ,IAAmBd,UAAWyE,EAAOzE,YACzC,IAAK,eACD,OAAO,2BAAKc,GAAZ,IAAmBnC,MAAO8F,EAAO9F,QACrC,QACI,OAAOmC,MCXb4D,EAAmBC,OAAOC,sCAAwCC,IAE3DC,GAAQC,YAAYR,EAAaG,EAAiBM,YAAgBC,O,cCC/EC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BzB,K","file":"static/js/main.bd3f4b14.chunk.js","sourcesContent":["export const storageService = {\r\n    saveToStorage,\r\n    loadFromStorage\r\n}\r\n\r\nfunction saveToStorage(key, data) {\r\n    localStorage.setItem(key,JSON.stringify(data));\r\n};\r\n\r\nfunction loadFromStorage(key){\r\n    return JSON.parse(localStorage.getItem(key)); \r\n}","import axios from \"axios\";\r\nimport { storageService } from \"./storageService\";\r\n\r\nconst API_KEY = \"bouPb7Ob1dDQ3V3OvFX3udSa8KKD2QYq\";\r\nconst WEATHER_KEY = \"weather\";\r\nconst FAVORITES = \"favorites\";\r\nconst gFavorites = storageService.loadFromStorage(FAVORITES) || [];\r\n\r\nexport const weatherService = {\r\n    getGeoWeather,\r\n    getCurrWeather,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    isFavorite,\r\n    getFavorites,\r\n};\r\n\r\nfunction getFavorites() {\r\n    return gFavorites;\r\n}\r\n\r\nfunction isFavorite(id) {\r\n    return gFavorites.some((city) => city.id === id);\r\n}\r\n\r\nfunction addToFavorites(city) {\r\n    gFavorites.push(city);\r\n    storageService.saveToStorage(FAVORITES, gFavorites);\r\n    return gFavorites;\r\n}\r\n\r\nfunction removeFromFavorites(id) {\r\n    const cityIdx = gFavorites.findIndex((city) => city.id === id);\r\n    if (cityIdx !== -1) {\r\n        gFavorites.splice(cityIdx, 1);\r\n        storageService.saveToStorage(FAVORITES, gFavorites);\r\n        return gFavorites;\r\n    } else return -1;\r\n}\r\n\r\nfunction getPosition() {\r\n    return new Promise((success, error) => {\r\n        navigator.geolocation.getCurrentPosition(success, error);\r\n    });\r\n}\r\n\r\nasync function getGeoWeather() {\r\n    var position = await getPosition();\r\n    const { latitude } = position.coords;\r\n    const { longitude } = position.coords;\r\n    // const res = await axios(\r\n    //     `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude}%2C${longitude}`\r\n    // );\r\n    // const city = res.data.LocalizedName;\r\n    const city = \"london\";\r\n    const currWeather = await getCurrWeather(city);\r\n    return currWeather;\r\n}\r\n\r\nasync function getCurrWeather(q) {\r\n    let weather = storageService.loadFromStorage(WEATHER_KEY);\r\n    if (weather) return weather;\r\n    try {\r\n        const city = await axios(\r\n            `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${q}`\r\n        );\r\n        const todayWeather = await axios(\r\n            `https://dataservice.accuweather.com/currentconditions/v1/${city.data[0].Key}?apikey=${API_KEY}`\r\n        );\r\n        const weeklyWeather = await axios(\r\n            `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${city.data[0].Key}?apikey=${API_KEY}&metric=true`\r\n        );\r\n        weather = {\r\n            id: city.data[0].Key,\r\n            city: city.data[0].LocalizedName,\r\n            today: todayWeather.data[0],\r\n            weekly: weeklyWeather.data,\r\n        };\r\n        storageService.saveToStorage(WEATHER_KEY, weather);\r\n        return weather;\r\n    } catch (err) {\r\n        console.log(\"Error\", err);\r\n        throw err;\r\n    }\r\n}\r\n","import React from \"react\";\nimport { Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { changeUnits } from \"../../store/actions/weatherActions\";\n\nimport \"./Header.scss\";\n\nconst Header = (props) => {\n    function onChangeUnits(units) {\n        props.changeUnits(units);\n    }\n    return (\n        <header className=\"header\">\n            <Navbar bg=\"light\" expand=\"lg\">\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#/\">Home</Nav.Link>\n                        <Nav.Link href=\"#favorites\">Favorites</Nav.Link>\n                        <NavDropdown\n                            title=\"&deg;F / &deg;C\"\n                            id=\"basic-nav-dropdown\"\n                        >\n                            <NavDropdown.Item\n                                onClick={() => onChangeUnits(\"c\")}\n                            >\n                                Celsius\n                            </NavDropdown.Item>\n                            <NavDropdown.Item\n                                onClick={() => onChangeUnits(\"f\")}\n                            >\n                                Fahrenheit\n                            </NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </header>\n    );\n};\n\nconst mapDispatchToProps = {\n    changeUnits,\n};\n\nexport default connect(null, mapDispatchToProps)(Header);\n","import { weatherService } from \"../../services/weatherService\";\r\n\r\nexport function getCurrWeather(city) {\r\n    return async (dispatch) => {\r\n        try {\r\n            const currWeather = await weatherService.getCurrWeather(city);\r\n            dispatch({ type: \"SET_CURR_WEATHER\", currWeather });\r\n            return currWeather;\r\n        } catch (err) {\r\n            console.log(\"Error\", err);\r\n            throw err;\r\n        }\r\n    };\r\n}\r\n\r\nexport function getGeoWeather() {\r\n    return async (dispatch) => {\r\n        try {\r\n            const currWeather = await weatherService.getGeoWeather();\r\n            dispatch({ type: \"SET_CURR_WEATHER\", currWeather });\r\n            return currWeather;\r\n        } catch (err) {\r\n            console.log(\"Error\", err);\r\n            throw err;\r\n        }\r\n    };\r\n}\r\n\r\nexport function setCurrWeather(currWeather) {\r\n    return (dispatch) => {\r\n        dispatch({ type: \"SET_CURR_WEATHER\", currWeather });\r\n    };\r\n}\r\n\r\nexport function addCityToFavorites(city) {\r\n    return async (dispatch) => {\r\n        const favorites = weatherService.addToFavorites(city);\r\n        dispatch({ type: \"UPDATE_FAVORITES\", favorites });\r\n        return favorites;\r\n    };\r\n}\r\n\r\nexport function removeFromFavorites(id) {\r\n    return async (dispatch) => {\r\n        const favorites = weatherService.removeFromFavorites(id);\r\n        dispatch({ type: \"UPDATE_FAVORITES\", favorites });\r\n        return favorites;\r\n    };\r\n}\r\n\r\nexport function changeUnits(units) {\r\n    return (dispatch) => {\r\n        dispatch({ type: \"CHANGE_UNITS\", units });\r\n    };\r\n}\r\n","import \"./FavoritesList.scss\";\nimport Card from \"react-bootstrap/Card\";\n\nconst FavoritesList = ({ favorites, onChangeCurrWeather, units }) => {\n    function tempratureToShow(weather) {\n        return units === \"c\"\n            ? `${weather.Temperature.Metric.Value} \\u00b0C`\n            : `${weather.Temperature.Imperial.Value} \\u00b0F`;\n    }\n\n    return (\n        <section className=\"favorites-list flex wrap justify-center\">\n            {favorites &&\n                favorites.map((weather) => {\n                    return (\n                        <Card\n                            style={{ width: \"18rem\" }}\n                            className=\"flex column align-center\"\n                            key={weather.id}\n                            onClick={() => onChangeCurrWeather(weather)}\n                        >\n                            <Card.Title>{weather.city}</Card.Title>\n                            <Card.Text>\n                                {tempratureToShow(weather.today)}\n                            </Card.Text>\n                        </Card>\n                    );\n                })}\n        </section>\n    );\n};\n\nexport default FavoritesList;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport FavoritesList from \"../../cmps/FavoritesList/FavoritesList\";\nimport { setCurrWeather } from \"../../store/actions/weatherActions\";\n\nimport \"./Favorites.scss\";\n\nconst Favorites = (props) => {\n    const [favorites, setFavorites] = useState(null);\n    useEffect(() => {\n        setFavorites(props.favorites);\n    });\n\n    function changeCurrWeather(weather) {\n        props.setCurrWeather(weather);\n        props.history.push(\"/\");\n    }\n\n    return (\n        <div className=\"favorites flex column align-center\">\n            <h2>Favorites Locations</h2>\n            {favorites && (\n                <FavoritesList\n                    favorites={favorites}\n                    onChangeCurrWeather={changeCurrWeather}\n                    units={props.units}\n                />\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        favorites: state.weatherReducer.favorites,\n        units: state.weatherReducer.units,\n    };\n};\n\nconst mapDispatchToProps = {\n    setCurrWeather,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites);\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { Form, FormControl, Button } from \"react-bootstrap\";\n\nimport \"./LocationSearch.scss\";\n\nconst LocationSearch = ({ onSearch }) => {\n    const [search, setSearch] = useState(\"\");\n\n    function handleChange(e) {\n        setSearch(e.target.value);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        onSearch(search);\n    }\n\n    return (\n        <section className=\"location-search\">\n            <Form inline onSubmit={handleSubmit}>\n                <FormControl\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    className=\"mr-sm-2\"\n                    value={search}\n                    onChange={handleChange}\n                />\n                <Button onClick={handleSubmit} variant=\"outline-success\">\n                    Search\n                </Button>\n            </Form>\n        </section>\n    );\n};\n\nexport default LocationSearch;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nimport \"./WeatherPreview.scss\";\n\nconst WeatherPreview = ({\n    weather,\n    city,\n    toggleFavorite,\n    favBtnText,\n    units,\n}) => {\n    function tempratureToShow() {\n        return units === \"c\"\n            ? `${weather.Temperature.Metric.Value} \\u00b0C`\n            : `${weather.Temperature.Imperial.Value} \\u00b0F`;\n    }\n    return (\n        <Card\n            style={{ width: \"18rem\" }}\n            className=\"weather-preview flex column align-center\"\n        >\n            <Card.Title>{city}</Card.Title>\n            <i onClick={toggleFavorite} className={favBtnText}></i>\n            <Card.Text>{tempratureToShow()}</Card.Text>\n            <Card.Title>{weather.WeatherText}</Card.Title>\n        </Card>\n    );\n};\n\nexport default WeatherPreview;\n","import React from \"react\";\nimport moment from \"moment\";\nimport Card from \"react-bootstrap/Card\";\n\nimport \"./WeeklyList.scss\";\n\nconst WeeklyList = ({ WeeklyList, units }) => {\n    function tempratureToShow(min, max) {\n        return units === \"c\"\n            ? `${min} - ${max} \\u00b0C`\n            : `${Math.floor(min * 1.8 + 32)} - ${Math.floor(\n                  max * 1.8 + 32\n              )} \\u00b0F`;\n    }\n\n    return (\n        <section className=\"weekly-list flex wrap justify-center\">\n            {WeeklyList.map((weather) => {\n                return (\n                    <Card\n                        style={{ width: \"18rem\" }}\n                        className=\"weather-preview flex column align-center\"\n                        key={weather.EpochDate}\n                    >\n                        <Card.Title>\n                            {moment(weather.Date).format(\"ddd\")}\n                        </Card.Title>\n                        <Card.Text>\n                            {tempratureToShow(\n                                weather.Temperature.Minimum.Value,\n                                weather.Temperature.Maximum.Value\n                            )}\n                        </Card.Text>\n                    </Card>\n                );\n            })}\n        </section>\n    );\n};\n\nexport default WeeklyList;\n","import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport LocationSearch from \"../../cmps/LocationSearch/LocationSearch\";\nimport WeatherPreview from \"../../cmps/WeatherPreview/WeatherPreview\";\nimport WeeklyList from \"../../cmps/WeeklyList/WeeklyList\";\nimport { weatherService } from \"../../services/weatherService\";\nimport {\n    getCurrWeather,\n    addCityToFavorites,\n    removeFromFavorites,\n    getGeoWeather,\n} from \"../../store/actions/weatherActions\";\n\nimport \"./HomePage.scss\";\n\nconst HomePage = (props) => {\n    const [favBtnText, setFavBtnText] = useState(\"\");\n\n    useEffect(() => {\n        if (props.currWeather) {\n            setFavBtnText(\n                weatherService.isFavorite(props.currWeather.id)\n                    ? \"favorite fas fa-star\"\n                    : \"favorite far fa-star\"\n            );\n        } else {\n            (async function getWether() {\n                try {\n                    const currWeather = await props.getGeoWeather();\n                    setFavBtnText(\n                        weatherService.isFavorite(currWeather.id)\n                            ? \"favorite fas fa-star\"\n                            : \"favorite far fa-star\"\n                    );\n                } catch (err) {\n                    console.log(\"Error\", err);\n                }\n            })();\n        }\n    }, []);\n\n    async function handleSubmit(term) {\n        try {\n            const currWeather = await props.getCurrWeather(term);\n            setFavBtnText(\n                weatherService.isFavorite(currWeather.id)\n                    ? \"favorite fas fa-star\"\n                    : \"favorite far fa-star\"\n            );\n        } catch (err) {\n            console.log(\"Error\", err);\n        }\n    }\n\n    function toggleFavorite() {\n        weatherService.isFavorite(props.currWeather.id)\n            ? props.removeFromFavorites(props.currWeather.id)\n            : props.addCityToFavorites(props.currWeather);\n        toggleAddRemove();\n    }\n\n    function toggleAddRemove() {\n        setFavBtnText(\n            weatherService.isFavorite(props.currWeather.id)\n                ? \"favorite fas fa-star\"\n                : \"favorite far fa-star\"\n        );\n    }\n\n    return (\n        <div className=\"home-page   \">\n            {props.currWeather && (\n                <div>\n                    <span className=\"header flex space-between\">\n                        <span className=\"flex column align-center\">\n                            <WeatherPreview\n                                weather={props.currWeather.today}\n                                city={props.currWeather.city}\n                                favBtnText={favBtnText}\n                                toggleFavorite={toggleFavorite}\n                                units={props.units}\n                            />\n                        </span>\n                        <LocationSearch onSearch={handleSubmit} />\n                    </span>\n                    <WeeklyList\n                        WeeklyList={props.currWeather.weekly.DailyForecasts}\n                        units={props.units}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        currWeather: state.weatherReducer.currWeather,\n        units: state.weatherReducer.units,\n    };\n};\n\nconst mapDispatchToProps = {\n    getGeoWeather,\n    getCurrWeather,\n    addCityToFavorites,\n    removeFromFavorites,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\n","import { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Header from \"./cmps/Header/Header\";\nimport Favorites from \"./pages/Favorites/Favorites\";\nimport HomePage from \"./pages/HomePage/HomePage\";\nimport \"./assets/styles/global.scss\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"App\">\n                <Header />\n                <Switch>\n                    <Route component={Favorites} path=\"/favorites\" />\n                    <Route component={HomePage} path=\"/\" />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { weatherService } from \"../../services/weatherService\";\r\n\r\nconst INITIAL_STATE = {\r\n    currWeather: null,\r\n    favorites: weatherService.getFavorites(),\r\n    units: \"c\",\r\n};\r\n\r\nexport function weatherReducer(state = INITIAL_STATE, action) {\r\n    switch (action.type) {\r\n        case \"SET_CURR_WEATHER\":\r\n            return { ...state, currWeather: action.currWeather };\r\n        case \"UPDATE_FAVORITES\":\r\n            return { ...state, favorites: action.favorites };\r\n        case \"CHANGE_UNITS\":\r\n            return { ...state, units: action.units };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux'\r\nimport { weatherReducer } from './reducers/weatherReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({weatherReducer});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}